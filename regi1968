import IStrategy from '../strategy/IStrategy';
import IDAO from '../model/service/DAO/IDAO';
import ProdutoCheckerRequired from '../strategy/ProdutoCheckerRequired';
import Produto from '../model/dominio/Produto';
import ProdutoDAO from '../model/service/DAO/ProdutoDAO';

export default abstract class AbsFacade {
  regras: Map<string, Map<string, IStrategy[]>>;
  daos: Map<string, IDAO>;
  constructor() {
    this.regras = new Map();
    this.daos = new Map();

    const regrasCriarProduto = [new ProdutoCheckerRequired()];
    const regrasAlterarProduto = [new ProdutoCheckerRequired()];
    const regrasConsultarProduto = [];
    const regrasExcluirProduto = [];

    const regrasProduto: Map<string, IStrategy[]> = new Map();

    regrasProduto.set('criar', regrasCriarProduto);
    regrasProduto.set('alterar', regrasAlterarProduto);
    regrasProduto.set('consultar', regrasConsultarProduto);
    regrasProduto.set('excluir', regrasExcluirProduto);

    this.regras.set(Produto.constructor.name, regrasProduto);

    this.daos.set(Produto.constructor.name, new ProdutoDAO());
  } 
} 
  75  src/facade/ProdutoFacade.ts 
@@ -5,15 +5,23 @@ import Produto from '../model/dominio/Produto';

import ProdutoDAO from '../model/service/DAO/ProdutoDAO';
import ProdutoCheckerRequired from '../strategy/ProdutoCheckerRequired';
import AbsFacade from './AbsFacade';


export default class ProdutoFacade implements IFacade {
export default class ProdutoFacade extends AbsFacade implements IFacade {
  async criar(produto: Produto): Promise<Result> {
    const dao = new ProdutoDAO();
    const checker = new ProdutoCheckerRequired();
    let result: Result;
    const className = Produto.constructor.name;
    const dao = this.daos.get(className);
    const regras = this.regras.get(className).get('criar');
    let result: Result = new Result('');

    try{
      result = checker.processar(produto);
      regras.forEach(e => {
        const { mensagem, erro, data} = e.processar(produto);
        result.mensagem += mensagem + '/n';
        result.erro += erro;
        result.data.push(...data);
      })
      if(!result.erro) {
        result = await dao.criar(produto);
      }
@@ -25,10 +33,21 @@ export default class ProdutoFacade implements IFacade {
  }

  async consultar(objParcialProduto: Partial<Produto>): Promise<Result> {
    const dao = new ProdutoDAO();
    let result = new Result('falha ao consultar', 1);
    const className = Produto.constructor.name;
    const dao = this.daos.get(className);
    const regras = this.regras.get(className).get('consultar');
    let result: Result = new Result('');

    try{
      result = await dao.consultar(objParcialProduto as Produto);
      regras.forEach(e => {
        const { mensagem, erro, data} = e.processar(objParcialProduto as Produto);
        result.mensagem += mensagem + '/n';
        result.erro += erro;
        result.data.push(...data);
      })
      if(!result.erro) {
        result = await dao.consultar(objParcialProduto as Produto);
      }
    } catch(erro) {
      result.mensagem = erro;
    } finally {
@@ -37,14 +56,21 @@ export default class ProdutoFacade implements IFacade {
  }

  async alterar(produto: Produto): Promise<Result> { 
      const dao = new ProdutoDAO();
      const checker = new ProdutoCheckerRequired();
      let result: Result;
      try{
        result = checker.processar(produto);
        if(!result.erro) {
          result = await dao.alterar(produto);
        }
    const className = Produto.constructor.name;
    const dao = this.daos.get(className);
    const regras = this.regras.get(className).get('alterar');
    let result: Result = new Result('');

    try{
      regras.forEach(e => {
        const { mensagem, erro, data} = e.processar(produto as Produto);
        result.mensagem += mensagem + '/n';
        result.erro += erro;
        result.data.push(...data);
      });
      if(!result.erro) {
        result = await dao.alterar(produto);
      }
      } catch(erro) {
        result.mensagem = erro;
      } finally {
@@ -53,10 +79,21 @@ export default class ProdutoFacade implements IFacade {
  }

  async excluir(id: number): Promise<Result> {
    const dao = new ProdutoDAO();
    let result = new Result('falha ao alterar', 1);
    const className = Produto.constructor.name;
    const dao = this.daos.get(className);
    const regras = this.regras.get(className).get('excluir');
    let result: Result = new Result('');

    try{
      result = await dao.excluir(id);
      regras.forEach(e => {
        const { mensagem, erro, data} = e.processar({id} as Produto);
        result.mensagem += mensagem + '/n';
        result.erro += erro;
        result.data.push(...data);
      });
      if(!result.erro) {
        result = await dao.excluir(id);
      }
    } catch(erro) {
      result.mensagem = erro;
    } finally {
